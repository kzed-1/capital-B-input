{"version":3,"sources":["android-chrome-512x512.png","input_cmp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CapBInput","props","state","inputField","wordList","handleInput","bind","handleEnterKeyDown","clearEntries","event","str","currentTarget","value","split","i","length","toUpperCase","this","setState","join","wordListCopy","slice","alphabet","Set","key","currentWord","charArray","every","char","has","push","list","map","word","index","className","src","Logo","alt","type","onChange","onKeyDown","placeholder","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,oD,oNC8E5BC,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,WAAY,GACZC,SAAU,IAGd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBATL,E,wDAYPG,GAIR,IAHA,IAAIC,EAAMD,EAAME,cAAcC,MAAMC,MAAM,IAGjCC,EAAI,EAAGA,EAAIL,EAAME,cAAcC,MAAMG,OAAQD,IAEnC,MAAXJ,EAAII,KACJJ,EAAII,GAAKJ,EAAII,GAAGE,eAIxBC,KAAKC,SAAS,CAAEf,WAAYO,EAAIS,KAAK,Q,yCAGtBV,GACf,IAAMW,EAAeH,KAAKf,MAAME,SAASiB,QACnCC,EAAW,IAAIC,IAAI,6BAA6BV,MAAM,KAE5D,GAAkB,UAAdJ,EAAMe,IAAiB,CACvB,IAAMC,EAAcR,KAAKf,MAAMC,WACzBuB,EAAYD,EAAYZ,MAAM,KAER,IAAvBY,EAAYV,QAAgBW,EAAUC,OAAM,SAACC,GAAD,OAAUN,EAASO,IAAID,SACpER,EAAaU,KAAKb,KAAKf,MAAMC,YAC7Bc,KAAKC,SAAS,CAAEd,SAAUgB,EAAcjB,WAAY,S,qCAM5Dc,KAAKC,SAAS,CAAEd,SAAU,O,+BAK1B,IAAM2B,EAAOd,KAAKf,MAAME,SAAS4B,KAAI,SAACC,EAAMC,GAAP,OACjC,wBAAIV,IAAKU,GAASD,MAGtB,OACI,yBAAKE,UAAU,0BACX,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,SAAd,gBAEJ,yBAAKA,UAAU,OAAOC,IAAKC,IAAMC,IAAI,KACrC,2BAAOC,KAAK,OACRJ,UAAU,WACVvB,MAAOK,KAAKf,MAAMC,WAClBqC,SAAUvB,KAAKZ,YACfoC,UAAWxB,KAAKV,mBAChBmC,YAAY,iBAChB,4BACIP,UAAU,WACVQ,QAAS1B,KAAKT,cAFlB,mBAGA,wBAAI2B,UAAU,QACTJ,Q,GApEGa,IAAMC,WCSfC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24c07257.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/android-chrome-512x512.0df36f74.png\";","import React from 'react';\nimport Logo from './android-chrome-512x512.png'\n\nclass CapBInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            inputField: \"\",\n            wordList: []\n        }\n\n        this.handleInput = this.handleInput.bind(this)\n        this.handleEnterKeyDown = this.handleEnterKeyDown.bind(this)\n        this.clearEntries = this.clearEntries.bind(this)\n    }\n\n    handleInput(event) {\n        let str = event.currentTarget.value.split(\"\");\n\n        // console.log(str)\n        for (let i = 0; i < event.currentTarget.value.length; i++) {\n\n            if (str[i] === 'b') {\n                str[i] = str[i].toUpperCase()\n            }\n        }\n\n        this.setState({ inputField: str.join(\"\") })\n    }\n\n    handleEnterKeyDown(event) {\n        const wordListCopy = this.state.wordList.slice();\n        const alphabet = new Set(\"abcdefghijklmnopqrstuvwxyz\".split(\"\"))\n\n        if (event.key === \"Enter\") {\n            const currentWord = this.state.inputField\n            const charArray = currentWord.split(\"\")\n\n            if ( currentWord.length !== 0 || charArray.every((char) => alphabet.has(char))) {\n                wordListCopy.push(this.state.inputField);\n                this.setState({ wordList: wordListCopy, inputField: \"\" })\n            } \n        }\n    }\n\n    clearEntries() {\n        this.setState({ wordList: [] })\n    }\n\n    render() {\n\n        const list = this.state.wordList.map((word, index) => (\n            <li key={index} >{word}</li>\n        ))\n\n        return (\n            <div className=\"inputWordListContainer\">\n                <div className=\"titleContainer\">\n                    <h1 className=\"title\" > Capital B </h1>\n                </div>\n                <img className=\"logo\" src={Logo} alt=\"\"/>\n                <input type=\"text\"\n                    className=\"inputBox\"\n                    value={this.state.inputField}\n                    onChange={this.handleInput}\n                    onKeyDown={this.handleEnterKeyDown}\n                    placeholder=\"Type Here...\" />\n                <button  \n                    className=\"clearBtn\"\n                    onClick={this.clearEntries}> Clear Entries </button>\n                <ul className=\"list\">\n                    {list}\n                </ul>\n            </div>\n        )\n    }\n}\n\nexport default CapBInput;","import React from 'react';\nimport './App.css';\nimport InputCmp from './input_cmp'\n\nfunction App() {\n  return (\n    <div>\n      <InputCmp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}